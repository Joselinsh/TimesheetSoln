// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Timesheet.Data;

#nullable disable

namespace Timesheet.Migrations
{
    [DbContext(typeof(TimesheetDbContext))]
    [Migration("20250206201616_dbTimesheetApp")]
    partial class dbTimesheetApp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Timesheet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 6, 20, 16, 15, 838, DateTimeKind.Utc).AddTicks(4070),
                            DateOfBirth = new DateOnly(2002, 6, 6),
                            Department = "Admin",
                            Email = "admin@timesheet.com",
                            FullName = "Admin",
                            JoiningDate = new DateOnly(2025, 1, 1),
                            PasswordHash = new byte[] { 186, 166, 251, 220, 176, 38, 52, 32, 167, 188, 16, 220, 166, 198, 67, 199, 113, 16, 97, 39, 177, 225, 182, 78, 254, 145, 68, 214, 235, 199, 66, 121, 106, 79, 198, 182, 63, 69, 42, 74, 45, 205, 254, 39, 86, 240, 16, 179, 143, 116, 212, 199, 82, 179, 201, 207, 77, 109, 133, 144, 79, 214, 132, 137 },
                            PasswordSalt = new byte[] { 159, 189, 55, 186, 32, 156, 238, 249, 115, 222, 6, 237, 124, 190, 232, 200, 65, 91, 102, 140, 128, 2, 30, 112, 240, 33, 64, 222, 133, 247, 136, 144, 17, 117, 29, 16, 34, 11, 13, 84, 184, 53, 9, 120, 229, 197, 110, 106, 154, 139, 251, 104, 225, 171, 85, 180, 249, 12, 208, 144, 142, 109, 146, 67, 205, 91, 26, 90, 19, 155, 44, 8, 187, 20, 214, 38, 184, 155, 145, 32, 173, 138, 62, 75, 171, 24, 73, 45, 215, 210, 78, 57, 220, 238, 241, 45, 192, 195, 248, 244, 125, 9, 252, 18, 196, 174, 56, 159, 116, 5, 117, 172, 229, 143, 116, 85, 113, 223, 164, 88, 169, 254, 4, 29, 10, 27, 35, 125 },
                            PhoneNumber = "9876543456",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 2, 6, 20, 16, 15, 838, DateTimeKind.Utc).AddTicks(4071)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
